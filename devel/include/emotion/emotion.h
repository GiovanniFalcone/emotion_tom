// Generated by gencpp from file emotion/emotion.msg
// DO NOT EDIT!


#ifndef EMOTION_MESSAGE_EMOTION_H
#define EMOTION_MESSAGE_EMOTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace emotion
{
template <class ContainerAllocator>
struct emotion_
{
  typedef emotion_<ContainerAllocator> Type;

  emotion_()
    : dominant_emotion()
    , face_found(false)
    , model_confidence(0.0)  {
    }
  emotion_(const ContainerAllocator& _alloc)
    : dominant_emotion(_alloc)
    , face_found(false)
    , model_confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _dominant_emotion_type;
  _dominant_emotion_type dominant_emotion;

   typedef uint8_t _face_found_type;
  _face_found_type face_found;

   typedef double _model_confidence_type;
  _model_confidence_type model_confidence;





  typedef boost::shared_ptr< ::emotion::emotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::emotion::emotion_<ContainerAllocator> const> ConstPtr;

}; // struct emotion_

typedef ::emotion::emotion_<std::allocator<void> > emotion;

typedef boost::shared_ptr< ::emotion::emotion > emotionPtr;
typedef boost::shared_ptr< ::emotion::emotion const> emotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::emotion::emotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::emotion::emotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::emotion::emotion_<ContainerAllocator1> & lhs, const ::emotion::emotion_<ContainerAllocator2> & rhs)
{
  return lhs.dominant_emotion == rhs.dominant_emotion &&
    lhs.face_found == rhs.face_found &&
    lhs.model_confidence == rhs.model_confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::emotion::emotion_<ContainerAllocator1> & lhs, const ::emotion::emotion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace emotion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::emotion::emotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::emotion::emotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::emotion::emotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::emotion::emotion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::emotion::emotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::emotion::emotion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::emotion::emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f1330b96c69645b621bb929fd2da385";
  }

  static const char* value(const ::emotion::emotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f1330b96c69645bULL;
  static const uint64_t static_value2 = 0x621bb929fd2da385ULL;
};

template<class ContainerAllocator>
struct DataType< ::emotion::emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "emotion/emotion";
  }

  static const char* value(const ::emotion::emotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::emotion::emotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string dominant_emotion\n"
"bool face_found\n"
"float64 model_confidence\n"
;
  }

  static const char* value(const ::emotion::emotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::emotion::emotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dominant_emotion);
      stream.next(m.face_found);
      stream.next(m.model_confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct emotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::emotion::emotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::emotion::emotion_<ContainerAllocator>& v)
  {
    s << indent << "dominant_emotion: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.dominant_emotion);
    s << indent << "face_found: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.face_found);
    s << indent << "model_confidence: ";
    Printer<double>::stream(s, indent + "  ", v.model_confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EMOTION_MESSAGE_EMOTION_H
